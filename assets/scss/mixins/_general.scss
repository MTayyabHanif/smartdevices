// blur
@mixin blur($radius) {
	-webkit-filter: blur($radius);
	-moz-filter: blur($radius);
	-ms-filter: blur($radius);
	filter: blur($radius);
}


// Buttons
@mixin buttons-font($font) {
	button, .button {
		font-family: #{$font};
	}
}



// Inputs
@mixin inputs-font($font) {
	input, textarea, select {
		font-family: #{$font};
	}
}
















@mixin clearfix {
	&:before, &:after {
		content: "";
		display: table;
	}
	&:after {
		clear: both;
	}
}

@mixin hoverActiveFocus() {
	&:hover, &:active, &:focus {
		@content;
	}
}

@mixin screen-reader-text() {
	clip: rect(1px 1px 1px 1px); /* IE6, IE7 */
	clip: rect(1px, 1px, 1px, 1px);
	position: absolute !important;
}

@mixin underlinedLink() {
	font-weight: 400;
	text-decoration: underline;

	&:hover {
		text-decoration: none;
	}
}






$rem-baseline: 16px !default;
$rem-fallback: false !default;
$rem-px-only: false !default;

@function rem-separator($list, $separator: false) {
  @if $separator == "comma" or $separator == "space" {
    @return append($list, null, $separator);
  }

  @if function-exists("list-separator") == true {
    @return list-separator($list);
  }

  // list-separator polyfill by Hugo Giraudel (https://sass-compatibility.github.io/#list_separator_function)
  $test-list: ();
  @each $item in $list {
    $test-list: append($test-list, $item, space);
  }

  @return if($test-list == $list, space, comma);
}

@mixin rem-baseline($zoom: 100%) {
  font-size: $zoom / 16px * $rem-baseline;
}

@function rem-convert($to, $values...) {
  $result: ();
  $separator: rem-separator($values);

  @each $value in $values {
    @if type-of($value) == "number" and unit($value) == "rem" and $to == "px" {
      $result: append($result, $value / 1rem * $rem-baseline + 0px, $separator);
    } @else if type-of($value) == "number" and unit($value) == "px" and $to == "rem" {
      $result: append($result, $value / $rem-baseline + 0rem, $separator);
    } @else if type-of($value) == "list" {
      $value-separator: rem-separator($value);
      $value: rem-convert($to, $value...);
      $value: rem-separator($value, $value-separator);
      $result: append($result, $value, $separator);
    } @else {
      $result: append($result, $value, $separator);
    }
  }

  @return if(length($result) == 1, nth($result, 1), $result);
}

@function rem($values...) {
  @if $rem-px-only {
    @return rem-convert(px, $values...);
  } @else {
    @return rem-convert(rem, $values...);
  }
}

@mixin rem($properties, $values...) {
  @if type-of($properties) == "map" {
    @each $property in map-keys($properties) {
      @include rem($property, map-get($properties, $property));
    }
  } @else {
    @each $property in $properties {
      @if $rem-fallback or $rem-px-only {
        #{$property}: rem-convert(px, $values...);
      }
      @if not $rem-px-only {
        #{$property}: rem-convert(rem, $values...);
      }
    }
  }
}

$rem-fallback: true;

  // font-size: rem(24rem); // Simple
  // padding: rem(5px 10px); // Multiple values
  // border-bottom: rem(1px solid black); // Multiple mixed values
  // box-shadow: rem(0 0 2px #ccc, inset 0 0 5px #eee); // Comma-separated values
  // text-shadow: rem(1px 1px) #eee, rem(-1px) 0 #eee; // Alternate use
// @include rem(font-size, 24px);  //for both px and rem when fallback true
